// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TorqData.proto

#ifndef PROTOBUF_TorqData_2eproto__INCLUDED
#define PROTOBUF_TorqData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_TorqData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsShowInfoImpl();
void InitDefaultsShowInfo();
void InitDefaultsTorqueImpl();
void InitDefaultsTorque();
inline void InitDefaults() {
  InitDefaultsShowInfo();
  InitDefaultsTorque();
}
}  // namespace protobuf_TorqData_2eproto
namespace TorqData {
class ShowInfo;
class ShowInfoDefaultTypeInternal;
extern ShowInfoDefaultTypeInternal _ShowInfo_default_instance_;
class Torque;
class TorqueDefaultTypeInternal;
extern TorqueDefaultTypeInternal _Torque_default_instance_;
}  // namespace TorqData
namespace TorqData {

// ===================================================================

class ShowInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TorqData.ShowInfo) */ {
 public:
  ShowInfo();
  virtual ~ShowInfo();

  ShowInfo(const ShowInfo& from);

  inline ShowInfo& operator=(const ShowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowInfo(ShowInfo&& from) noexcept
    : ShowInfo() {
    *this = ::std::move(from);
  }

  inline ShowInfo& operator=(ShowInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowInfo* internal_default_instance() {
    return reinterpret_cast<const ShowInfo*>(
               &_ShowInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ShowInfo* other);
  friend void swap(ShowInfo& a, ShowInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ShowInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShowInfo& from);
  void MergeFrom(const ShowInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShowInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes strValue = 2;
  void clear_strvalue();
  static const int kStrValueFieldNumber = 2;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_strvalue(::std::string&& value);
  #endif
  void set_strvalue(const char* value);
  void set_strvalue(const void* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // bytes strName = 3;
  void clear_strname();
  static const int kStrNameFieldNumber = 3;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const void* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // @@protoc_insertion_point(class_scope:TorqData.ShowInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strvalue_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  mutable int _cached_size_;
  friend struct ::protobuf_TorqData_2eproto::TableStruct;
  friend void ::protobuf_TorqData_2eproto::InitDefaultsShowInfoImpl();
};
// -------------------------------------------------------------------

class Torque : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TorqData.Torque) */ {
 public:
  Torque();
  virtual ~Torque();

  Torque(const Torque& from);

  inline Torque& operator=(const Torque& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Torque(Torque&& from) noexcept
    : Torque() {
    *this = ::std::move(from);
  }

  inline Torque& operator=(Torque&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Torque& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Torque* internal_default_instance() {
    return reinterpret_cast<const Torque*>(
               &_Torque_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Torque* other);
  friend void swap(Torque& a, Torque& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Torque* New() const PROTOBUF_FINAL { return New(NULL); }

  Torque* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Torque& from);
  void MergeFrom(const Torque& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Torque* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double fTorque = 6 [packed = true];
  int ftorque_size() const;
  void clear_ftorque();
  static const int kFTorqueFieldNumber = 6;
  double ftorque(int index) const;
  void set_ftorque(int index, double value);
  void add_ftorque(double value);
  const ::google::protobuf::RepeatedField< double >&
      ftorque() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_ftorque();

  // repeated double fRpm = 7 [packed = true];
  int frpm_size() const;
  void clear_frpm();
  static const int kFRpmFieldNumber = 7;
  double frpm(int index) const;
  void set_frpm(int index, double value);
  void add_frpm(double value);
  const ::google::protobuf::RepeatedField< double >&
      frpm() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_frpm();

  // repeated .TorqData.ShowInfo tShow = 8;
  int tshow_size() const;
  void clear_tshow();
  static const int kTShowFieldNumber = 8;
  const ::TorqData::ShowInfo& tshow(int index) const;
  ::TorqData::ShowInfo* mutable_tshow(int index);
  ::TorqData::ShowInfo* add_tshow();
  ::google::protobuf::RepeatedPtrField< ::TorqData::ShowInfo >*
      mutable_tshow();
  const ::google::protobuf::RepeatedPtrField< ::TorqData::ShowInfo >&
      tshow() const;

  // repeated int32 dwDelPlus = 13 [packed = true];
  int dwdelplus_size() const;
  void clear_dwdelplus();
  static const int kDwDelPlusFieldNumber = 13;
  ::google::protobuf::int32 dwdelplus(int index) const;
  void set_dwdelplus(int index, ::google::protobuf::int32 value);
  void add_dwdelplus(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dwdelplus() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dwdelplus();

  // bytes llColTime = 15;
  void clear_llcoltime();
  static const int kLlColTimeFieldNumber = 15;
  const ::std::string& llcoltime() const;
  void set_llcoltime(const ::std::string& value);
  #if LANG_CXX11
  void set_llcoltime(::std::string&& value);
  #endif
  void set_llcoltime(const char* value);
  void set_llcoltime(const void* value, size_t size);
  ::std::string* mutable_llcoltime();
  ::std::string* release_llcoltime();
  void set_allocated_llcoltime(::std::string* llcoltime);

  // bytes strMemo = 22;
  void clear_strmemo();
  static const int kStrMemoFieldNumber = 22;
  const ::std::string& strmemo() const;
  void set_strmemo(const ::std::string& value);
  #if LANG_CXX11
  void set_strmemo(::std::string&& value);
  #endif
  void set_strmemo(const char* value);
  void set_strmemo(const void* value, size_t size);
  ::std::string* mutable_strmemo();
  ::std::string* release_strmemo();
  void set_allocated_strmemo(::std::string* strmemo);

  // bytes strRemark = 23;
  void clear_strremark();
  static const int kStrRemarkFieldNumber = 23;
  const ::std::string& strremark() const;
  void set_strremark(const ::std::string& value);
  #if LANG_CXX11
  void set_strremark(::std::string&& value);
  #endif
  void set_strremark(const char* value);
  void set_strremark(const void* value, size_t size);
  ::std::string* mutable_strremark();
  ::std::string* release_strremark();
  void set_allocated_strremark(::std::string* strremark);

  // fixed64 coltime = 1;
  void clear_coltime();
  static const int kColtimeFieldNumber = 1;
  ::google::protobuf::uint64 coltime() const;
  void set_coltime(::google::protobuf::uint64 value);

  // int32 dwSeqNo = 2;
  void clear_dwseqno();
  static const int kDwSeqNoFieldNumber = 2;
  ::google::protobuf::int32 dwseqno() const;
  void set_dwseqno(::google::protobuf::int32 value);

  // int32 dwQuality = 3;
  void clear_dwquality();
  static const int kDwQualityFieldNumber = 3;
  ::google::protobuf::int32 dwquality() const;
  void set_dwquality(::google::protobuf::int32 value);

  // double fMaxTorq = 5;
  void clear_fmaxtorq();
  static const int kFMaxTorqFieldNumber = 5;
  double fmaxtorq() const;
  void set_fmaxtorq(double value);

  // int32 dwIPPos = 4;
  void clear_dwippos();
  static const int kDwIPPosFieldNumber = 4;
  ::google::protobuf::int32 dwippos() const;
  void set_dwippos(::google::protobuf::int32 value);

  // int32 dwIPTorq = 10;
  void clear_dwiptorq();
  static const int kDwIPTorqFieldNumber = 10;
  ::google::protobuf::int32 dwiptorq() const;
  void set_dwiptorq(::google::protobuf::int32 value);

  // fixed64 begintime = 9;
  void clear_begintime();
  static const int kBegintimeFieldNumber = 9;
  ::google::protobuf::uint64 begintime() const;
  void set_begintime(::google::protobuf::uint64 value);

  // int32 dwTotalPlus = 11;
  void clear_dwtotalplus();
  static const int kDwTotalPlusFieldNumber = 11;
  ::google::protobuf::int32 dwtotalplus() const;
  void set_dwtotalplus(::google::protobuf::int32 value);

  // int32 dwIPPlus = 12;
  void clear_dwipplus();
  static const int kDwIPPlusFieldNumber = 12;
  ::google::protobuf::int32 dwipplus() const;
  void set_dwipplus(::google::protobuf::int32 value);

  // int32 dwColInter = 14;
  void clear_dwcolinter();
  static const int kDwColInterFieldNumber = 14;
  ::google::protobuf::int32 dwcolinter() const;
  void set_dwcolinter(::google::protobuf::int32 value);

  // int32 dwVer = 16;
  void clear_dwver();
  static const int kDwVerFieldNumber = 16;
  ::google::protobuf::int32 dwver() const;
  void set_dwver(::google::protobuf::int32 value);

  // bool bToolBuck = 21;
  void clear_btoolbuck();
  static const int kBToolBuckFieldNumber = 21;
  bool btoolbuck() const;
  void set_btoolbuck(bool value);

  // bool bNCheckIP = 24;
  void clear_bncheckip();
  static const int kBNCheckIPFieldNumber = 24;
  bool bncheckip() const;
  void set_bncheckip(bool value);

  // bool bShackle = 25;
  void clear_bshackle();
  static const int kBShackleFieldNumber = 25;
  bool bshackle() const;
  void set_bshackle(bool value);

  // bool bTimeLine = 26;
  void clear_btimeline();
  static const int kBTimeLineFieldNumber = 26;
  bool btimeline() const;
  void set_btimeline(bool value);

  // int32 dwTorqUnit = 27;
  void clear_dwtorqunit();
  static const int kDwTorqUnitFieldNumber = 27;
  ::google::protobuf::int32 dwtorqunit() const;
  void set_dwtorqunit(::google::protobuf::int32 value);

  // double fMaxLimit = 31;
  void clear_fmaxlimit();
  static const int kFMaxLimitFieldNumber = 31;
  double fmaxlimit() const;
  void set_fmaxlimit(double value);

  // double fUpperLimit = 32;
  void clear_fupperlimit();
  static const int kFUpperLimitFieldNumber = 32;
  double fupperlimit() const;
  void set_fupperlimit(double value);

  // double fControl = 33;
  void clear_fcontrol();
  static const int kFControlFieldNumber = 33;
  double fcontrol() const;
  void set_fcontrol(double value);

  // double fLowerLimit = 34;
  void clear_flowerlimit();
  static const int kFLowerLimitFieldNumber = 34;
  double flowerlimit() const;
  void set_flowerlimit(double value);

  // double fSpeedDown = 35;
  void clear_fspeeddown();
  static const int kFSpeedDownFieldNumber = 35;
  double fspeeddown() const;
  void set_fspeeddown(double value);

  // double fShow = 36;
  void clear_fshow();
  static const int kFShowFieldNumber = 36;
  double fshow() const;
  void set_fshow(double value);

  // double fBear = 37;
  void clear_fbear();
  static const int kFBearFieldNumber = 37;
  double fbear() const;
  void set_fbear(double value);

  // double fUpperTai = 38;
  void clear_fuppertai();
  static const int kFUpperTaiFieldNumber = 38;
  double fuppertai() const;
  void set_fuppertai(double value);

  // double fLowerTai = 39;
  void clear_flowertai();
  static const int kFLowerTaiFieldNumber = 39;
  double flowertai() const;
  void set_flowertai(double value);

  // double fOptTorq = 40;
  void clear_fopttorq();
  static const int kFOptTorqFieldNumber = 40;
  double fopttorq() const;
  void set_fopttorq(double value);

  // double fMaxCir = 41;
  void clear_fmaxcir();
  static const int kFMaxCirFieldNumber = 41;
  double fmaxcir() const;
  void set_fmaxcir(double value);

  // double fUpperCir = 42;
  void clear_fuppercir();
  static const int kFUpperCirFieldNumber = 42;
  double fuppercir() const;
  void set_fuppercir(double value);

  // double fControlCir = 43;
  void clear_fcontrolcir();
  static const int kFControlCirFieldNumber = 43;
  double fcontrolcir() const;
  void set_fcontrolcir(double value);

  // double fLowerCir = 44;
  void clear_flowercir();
  static const int kFLowerCirFieldNumber = 44;
  double flowercir() const;
  void set_flowercir(double value);

  // double fMaxTime = 45;
  void clear_fmaxtime();
  static const int kFMaxTimeFieldNumber = 45;
  double fmaxtime() const;
  void set_fmaxtime(double value);

  // double fUpperTime = 46;
  void clear_fuppertime();
  static const int kFUpperTimeFieldNumber = 46;
  double fuppertime() const;
  void set_fuppertime(double value);

  // double fControlTime = 47;
  void clear_fcontroltime();
  static const int kFControlTimeFieldNumber = 47;
  double fcontroltime() const;
  void set_fcontroltime(double value);

  // double fLowerTime = 48;
  void clear_flowertime();
  static const int kFLowerTimeFieldNumber = 48;
  double flowertime() const;
  void set_flowertime(double value);

  // double fPlus = 51;
  void clear_fplus();
  static const int kFPlusFieldNumber = 51;
  double fplus() const;
  void set_fplus(double value);

  // double fMaxRPM = 52;
  void clear_fmaxrpm();
  static const int kFMaxRPMFieldNumber = 52;
  double fmaxrpm() const;
  void set_fmaxrpm(double value);

  // double fCut = 53;
  void clear_fcut();
  static const int kFCutFieldNumber = 53;
  double fcut() const;
  void set_fcut(double value);

  // double fRpmAdj = 54;
  void clear_frpmadj();
  static const int kFRpmAdjFieldNumber = 54;
  double frpmadj() const;
  void set_frpmadj(double value);

  // double fMulti = 55;
  void clear_fmulti();
  static const int kFMultiFieldNumber = 55;
  double fmulti() const;
  void set_fmulti(double value);

  // double fMinShlSlope = 70;
  void clear_fminshlslope();
  static const int kFMinShlSlopeFieldNumber = 70;
  double fminshlslope() const;
  void set_fminshlslope(double value);

  // double fMaxDeltaCir = 71;
  void clear_fmaxdeltacir();
  static const int kFMaxDeltaCirFieldNumber = 71;
  double fmaxdeltacir() const;
  void set_fmaxdeltacir(double value);

  // double fMinDeltaCir = 72;
  void clear_fmindeltacir();
  static const int kFMinDeltaCirFieldNumber = 72;
  double fmindeltacir() const;
  void set_fmindeltacir(double value);

  // double fMakeupDur = 73;
  void clear_fmakeupdur();
  static const int kFMakeupDurFieldNumber = 73;
  double fmakeupdur() const;
  void set_fmakeupdur(double value);

  // @@protoc_insertion_point(class_scope:TorqData.Torque)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > ftorque_;
  mutable int _ftorque_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > frpm_;
  mutable int _frpm_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::TorqData::ShowInfo > tshow_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwdelplus_;
  mutable int _dwdelplus_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr llcoltime_;
  ::google::protobuf::internal::ArenaStringPtr strmemo_;
  ::google::protobuf::internal::ArenaStringPtr strremark_;
  ::google::protobuf::uint64 coltime_;
  ::google::protobuf::int32 dwseqno_;
  ::google::protobuf::int32 dwquality_;
  double fmaxtorq_;
  ::google::protobuf::int32 dwippos_;
  ::google::protobuf::int32 dwiptorq_;
  ::google::protobuf::uint64 begintime_;
  ::google::protobuf::int32 dwtotalplus_;
  ::google::protobuf::int32 dwipplus_;
  ::google::protobuf::int32 dwcolinter_;
  ::google::protobuf::int32 dwver_;
  bool btoolbuck_;
  bool bncheckip_;
  bool bshackle_;
  bool btimeline_;
  ::google::protobuf::int32 dwtorqunit_;
  double fmaxlimit_;
  double fupperlimit_;
  double fcontrol_;
  double flowerlimit_;
  double fspeeddown_;
  double fshow_;
  double fbear_;
  double fuppertai_;
  double flowertai_;
  double fopttorq_;
  double fmaxcir_;
  double fuppercir_;
  double fcontrolcir_;
  double flowercir_;
  double fmaxtime_;
  double fuppertime_;
  double fcontroltime_;
  double flowertime_;
  double fplus_;
  double fmaxrpm_;
  double fcut_;
  double frpmadj_;
  double fmulti_;
  double fminshlslope_;
  double fmaxdeltacir_;
  double fmindeltacir_;
  double fmakeupdur_;
  mutable int _cached_size_;
  friend struct ::protobuf_TorqData_2eproto::TableStruct;
  friend void ::protobuf_TorqData_2eproto::InitDefaultsTorqueImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShowInfo

// bytes strValue = 2;
inline void ShowInfo::clear_strvalue() {
  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShowInfo::strvalue() const {
  // @@protoc_insertion_point(field_get:TorqData.ShowInfo.strValue)
  return strvalue_.GetNoArena();
}
inline void ShowInfo::set_strvalue(const ::std::string& value) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TorqData.ShowInfo.strValue)
}
#if LANG_CXX11
inline void ShowInfo::set_strvalue(::std::string&& value) {
  
  strvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TorqData.ShowInfo.strValue)
}
#endif
inline void ShowInfo::set_strvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TorqData.ShowInfo.strValue)
}
inline void ShowInfo::set_strvalue(const void* value, size_t size) {
  
  strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TorqData.ShowInfo.strValue)
}
inline ::std::string* ShowInfo::mutable_strvalue() {
  
  // @@protoc_insertion_point(field_mutable:TorqData.ShowInfo.strValue)
  return strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowInfo::release_strvalue() {
  // @@protoc_insertion_point(field_release:TorqData.ShowInfo.strValue)
  
  return strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowInfo::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue != NULL) {
    
  } else {
    
  }
  strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvalue);
  // @@protoc_insertion_point(field_set_allocated:TorqData.ShowInfo.strValue)
}

// bytes strName = 3;
inline void ShowInfo::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShowInfo::strname() const {
  // @@protoc_insertion_point(field_get:TorqData.ShowInfo.strName)
  return strname_.GetNoArena();
}
inline void ShowInfo::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TorqData.ShowInfo.strName)
}
#if LANG_CXX11
inline void ShowInfo::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TorqData.ShowInfo.strName)
}
#endif
inline void ShowInfo::set_strname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TorqData.ShowInfo.strName)
}
inline void ShowInfo::set_strname(const void* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TorqData.ShowInfo.strName)
}
inline ::std::string* ShowInfo::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:TorqData.ShowInfo.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowInfo::release_strname() {
  // @@protoc_insertion_point(field_release:TorqData.ShowInfo.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowInfo::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:TorqData.ShowInfo.strName)
}

// -------------------------------------------------------------------

// Torque

// fixed64 coltime = 1;
inline void Torque::clear_coltime() {
  coltime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Torque::coltime() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.coltime)
  return coltime_;
}
inline void Torque::set_coltime(::google::protobuf::uint64 value) {
  
  coltime_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.coltime)
}

// int32 dwSeqNo = 2;
inline void Torque::clear_dwseqno() {
  dwseqno_ = 0;
}
inline ::google::protobuf::int32 Torque::dwseqno() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwSeqNo)
  return dwseqno_;
}
inline void Torque::set_dwseqno(::google::protobuf::int32 value) {
  
  dwseqno_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwSeqNo)
}

// int32 dwQuality = 3;
inline void Torque::clear_dwquality() {
  dwquality_ = 0;
}
inline ::google::protobuf::int32 Torque::dwquality() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwQuality)
  return dwquality_;
}
inline void Torque::set_dwquality(::google::protobuf::int32 value) {
  
  dwquality_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwQuality)
}

// int32 dwIPPos = 4;
inline void Torque::clear_dwippos() {
  dwippos_ = 0;
}
inline ::google::protobuf::int32 Torque::dwippos() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwIPPos)
  return dwippos_;
}
inline void Torque::set_dwippos(::google::protobuf::int32 value) {
  
  dwippos_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwIPPos)
}

// double fMaxTorq = 5;
inline void Torque::clear_fmaxtorq() {
  fmaxtorq_ = 0;
}
inline double Torque::fmaxtorq() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMaxTorq)
  return fmaxtorq_;
}
inline void Torque::set_fmaxtorq(double value) {
  
  fmaxtorq_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMaxTorq)
}

// repeated double fTorque = 6 [packed = true];
inline int Torque::ftorque_size() const {
  return ftorque_.size();
}
inline void Torque::clear_ftorque() {
  ftorque_.Clear();
}
inline double Torque::ftorque(int index) const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fTorque)
  return ftorque_.Get(index);
}
inline void Torque::set_ftorque(int index, double value) {
  ftorque_.Set(index, value);
  // @@protoc_insertion_point(field_set:TorqData.Torque.fTorque)
}
inline void Torque::add_ftorque(double value) {
  ftorque_.Add(value);
  // @@protoc_insertion_point(field_add:TorqData.Torque.fTorque)
}
inline const ::google::protobuf::RepeatedField< double >&
Torque::ftorque() const {
  // @@protoc_insertion_point(field_list:TorqData.Torque.fTorque)
  return ftorque_;
}
inline ::google::protobuf::RepeatedField< double >*
Torque::mutable_ftorque() {
  // @@protoc_insertion_point(field_mutable_list:TorqData.Torque.fTorque)
  return &ftorque_;
}

// repeated double fRpm = 7 [packed = true];
inline int Torque::frpm_size() const {
  return frpm_.size();
}
inline void Torque::clear_frpm() {
  frpm_.Clear();
}
inline double Torque::frpm(int index) const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fRpm)
  return frpm_.Get(index);
}
inline void Torque::set_frpm(int index, double value) {
  frpm_.Set(index, value);
  // @@protoc_insertion_point(field_set:TorqData.Torque.fRpm)
}
inline void Torque::add_frpm(double value) {
  frpm_.Add(value);
  // @@protoc_insertion_point(field_add:TorqData.Torque.fRpm)
}
inline const ::google::protobuf::RepeatedField< double >&
Torque::frpm() const {
  // @@protoc_insertion_point(field_list:TorqData.Torque.fRpm)
  return frpm_;
}
inline ::google::protobuf::RepeatedField< double >*
Torque::mutable_frpm() {
  // @@protoc_insertion_point(field_mutable_list:TorqData.Torque.fRpm)
  return &frpm_;
}

// repeated .TorqData.ShowInfo tShow = 8;
inline int Torque::tshow_size() const {
  return tshow_.size();
}
inline void Torque::clear_tshow() {
  tshow_.Clear();
}
inline const ::TorqData::ShowInfo& Torque::tshow(int index) const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.tShow)
  return tshow_.Get(index);
}
inline ::TorqData::ShowInfo* Torque::mutable_tshow(int index) {
  // @@protoc_insertion_point(field_mutable:TorqData.Torque.tShow)
  return tshow_.Mutable(index);
}
inline ::TorqData::ShowInfo* Torque::add_tshow() {
  // @@protoc_insertion_point(field_add:TorqData.Torque.tShow)
  return tshow_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TorqData::ShowInfo >*
Torque::mutable_tshow() {
  // @@protoc_insertion_point(field_mutable_list:TorqData.Torque.tShow)
  return &tshow_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TorqData::ShowInfo >&
Torque::tshow() const {
  // @@protoc_insertion_point(field_list:TorqData.Torque.tShow)
  return tshow_;
}

// fixed64 begintime = 9;
inline void Torque::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Torque::begintime() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.begintime)
  return begintime_;
}
inline void Torque::set_begintime(::google::protobuf::uint64 value) {
  
  begintime_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.begintime)
}

// int32 dwIPTorq = 10;
inline void Torque::clear_dwiptorq() {
  dwiptorq_ = 0;
}
inline ::google::protobuf::int32 Torque::dwiptorq() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwIPTorq)
  return dwiptorq_;
}
inline void Torque::set_dwiptorq(::google::protobuf::int32 value) {
  
  dwiptorq_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwIPTorq)
}

// int32 dwTotalPlus = 11;
inline void Torque::clear_dwtotalplus() {
  dwtotalplus_ = 0;
}
inline ::google::protobuf::int32 Torque::dwtotalplus() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwTotalPlus)
  return dwtotalplus_;
}
inline void Torque::set_dwtotalplus(::google::protobuf::int32 value) {
  
  dwtotalplus_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwTotalPlus)
}

// int32 dwIPPlus = 12;
inline void Torque::clear_dwipplus() {
  dwipplus_ = 0;
}
inline ::google::protobuf::int32 Torque::dwipplus() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwIPPlus)
  return dwipplus_;
}
inline void Torque::set_dwipplus(::google::protobuf::int32 value) {
  
  dwipplus_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwIPPlus)
}

// repeated int32 dwDelPlus = 13 [packed = true];
inline int Torque::dwdelplus_size() const {
  return dwdelplus_.size();
}
inline void Torque::clear_dwdelplus() {
  dwdelplus_.Clear();
}
inline ::google::protobuf::int32 Torque::dwdelplus(int index) const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwDelPlus)
  return dwdelplus_.Get(index);
}
inline void Torque::set_dwdelplus(int index, ::google::protobuf::int32 value) {
  dwdelplus_.Set(index, value);
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwDelPlus)
}
inline void Torque::add_dwdelplus(::google::protobuf::int32 value) {
  dwdelplus_.Add(value);
  // @@protoc_insertion_point(field_add:TorqData.Torque.dwDelPlus)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Torque::dwdelplus() const {
  // @@protoc_insertion_point(field_list:TorqData.Torque.dwDelPlus)
  return dwdelplus_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Torque::mutable_dwdelplus() {
  // @@protoc_insertion_point(field_mutable_list:TorqData.Torque.dwDelPlus)
  return &dwdelplus_;
}

// int32 dwColInter = 14;
inline void Torque::clear_dwcolinter() {
  dwcolinter_ = 0;
}
inline ::google::protobuf::int32 Torque::dwcolinter() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwColInter)
  return dwcolinter_;
}
inline void Torque::set_dwcolinter(::google::protobuf::int32 value) {
  
  dwcolinter_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwColInter)
}

// bytes llColTime = 15;
inline void Torque::clear_llcoltime() {
  llcoltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Torque::llcoltime() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.llColTime)
  return llcoltime_.GetNoArena();
}
inline void Torque::set_llcoltime(const ::std::string& value) {
  
  llcoltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TorqData.Torque.llColTime)
}
#if LANG_CXX11
inline void Torque::set_llcoltime(::std::string&& value) {
  
  llcoltime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TorqData.Torque.llColTime)
}
#endif
inline void Torque::set_llcoltime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  llcoltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TorqData.Torque.llColTime)
}
inline void Torque::set_llcoltime(const void* value, size_t size) {
  
  llcoltime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TorqData.Torque.llColTime)
}
inline ::std::string* Torque::mutable_llcoltime() {
  
  // @@protoc_insertion_point(field_mutable:TorqData.Torque.llColTime)
  return llcoltime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Torque::release_llcoltime() {
  // @@protoc_insertion_point(field_release:TorqData.Torque.llColTime)
  
  return llcoltime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Torque::set_allocated_llcoltime(::std::string* llcoltime) {
  if (llcoltime != NULL) {
    
  } else {
    
  }
  llcoltime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), llcoltime);
  // @@protoc_insertion_point(field_set_allocated:TorqData.Torque.llColTime)
}

// int32 dwVer = 16;
inline void Torque::clear_dwver() {
  dwver_ = 0;
}
inline ::google::protobuf::int32 Torque::dwver() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwVer)
  return dwver_;
}
inline void Torque::set_dwver(::google::protobuf::int32 value) {
  
  dwver_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwVer)
}

// bool bToolBuck = 21;
inline void Torque::clear_btoolbuck() {
  btoolbuck_ = false;
}
inline bool Torque::btoolbuck() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.bToolBuck)
  return btoolbuck_;
}
inline void Torque::set_btoolbuck(bool value) {
  
  btoolbuck_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.bToolBuck)
}

// bytes strMemo = 22;
inline void Torque::clear_strmemo() {
  strmemo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Torque::strmemo() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.strMemo)
  return strmemo_.GetNoArena();
}
inline void Torque::set_strmemo(const ::std::string& value) {
  
  strmemo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TorqData.Torque.strMemo)
}
#if LANG_CXX11
inline void Torque::set_strmemo(::std::string&& value) {
  
  strmemo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TorqData.Torque.strMemo)
}
#endif
inline void Torque::set_strmemo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strmemo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TorqData.Torque.strMemo)
}
inline void Torque::set_strmemo(const void* value, size_t size) {
  
  strmemo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TorqData.Torque.strMemo)
}
inline ::std::string* Torque::mutable_strmemo() {
  
  // @@protoc_insertion_point(field_mutable:TorqData.Torque.strMemo)
  return strmemo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Torque::release_strmemo() {
  // @@protoc_insertion_point(field_release:TorqData.Torque.strMemo)
  
  return strmemo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Torque::set_allocated_strmemo(::std::string* strmemo) {
  if (strmemo != NULL) {
    
  } else {
    
  }
  strmemo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmemo);
  // @@protoc_insertion_point(field_set_allocated:TorqData.Torque.strMemo)
}

// bytes strRemark = 23;
inline void Torque::clear_strremark() {
  strremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Torque::strremark() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.strRemark)
  return strremark_.GetNoArena();
}
inline void Torque::set_strremark(const ::std::string& value) {
  
  strremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TorqData.Torque.strRemark)
}
#if LANG_CXX11
inline void Torque::set_strremark(::std::string&& value) {
  
  strremark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TorqData.Torque.strRemark)
}
#endif
inline void Torque::set_strremark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TorqData.Torque.strRemark)
}
inline void Torque::set_strremark(const void* value, size_t size) {
  
  strremark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TorqData.Torque.strRemark)
}
inline ::std::string* Torque::mutable_strremark() {
  
  // @@protoc_insertion_point(field_mutable:TorqData.Torque.strRemark)
  return strremark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Torque::release_strremark() {
  // @@protoc_insertion_point(field_release:TorqData.Torque.strRemark)
  
  return strremark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Torque::set_allocated_strremark(::std::string* strremark) {
  if (strremark != NULL) {
    
  } else {
    
  }
  strremark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strremark);
  // @@protoc_insertion_point(field_set_allocated:TorqData.Torque.strRemark)
}

// bool bNCheckIP = 24;
inline void Torque::clear_bncheckip() {
  bncheckip_ = false;
}
inline bool Torque::bncheckip() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.bNCheckIP)
  return bncheckip_;
}
inline void Torque::set_bncheckip(bool value) {
  
  bncheckip_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.bNCheckIP)
}

// bool bShackle = 25;
inline void Torque::clear_bshackle() {
  bshackle_ = false;
}
inline bool Torque::bshackle() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.bShackle)
  return bshackle_;
}
inline void Torque::set_bshackle(bool value) {
  
  bshackle_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.bShackle)
}

// bool bTimeLine = 26;
inline void Torque::clear_btimeline() {
  btimeline_ = false;
}
inline bool Torque::btimeline() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.bTimeLine)
  return btimeline_;
}
inline void Torque::set_btimeline(bool value) {
  
  btimeline_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.bTimeLine)
}

// int32 dwTorqUnit = 27;
inline void Torque::clear_dwtorqunit() {
  dwtorqunit_ = 0;
}
inline ::google::protobuf::int32 Torque::dwtorqunit() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.dwTorqUnit)
  return dwtorqunit_;
}
inline void Torque::set_dwtorqunit(::google::protobuf::int32 value) {
  
  dwtorqunit_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.dwTorqUnit)
}

// double fMaxLimit = 31;
inline void Torque::clear_fmaxlimit() {
  fmaxlimit_ = 0;
}
inline double Torque::fmaxlimit() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMaxLimit)
  return fmaxlimit_;
}
inline void Torque::set_fmaxlimit(double value) {
  
  fmaxlimit_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMaxLimit)
}

// double fUpperLimit = 32;
inline void Torque::clear_fupperlimit() {
  fupperlimit_ = 0;
}
inline double Torque::fupperlimit() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fUpperLimit)
  return fupperlimit_;
}
inline void Torque::set_fupperlimit(double value) {
  
  fupperlimit_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fUpperLimit)
}

// double fControl = 33;
inline void Torque::clear_fcontrol() {
  fcontrol_ = 0;
}
inline double Torque::fcontrol() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fControl)
  return fcontrol_;
}
inline void Torque::set_fcontrol(double value) {
  
  fcontrol_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fControl)
}

// double fLowerLimit = 34;
inline void Torque::clear_flowerlimit() {
  flowerlimit_ = 0;
}
inline double Torque::flowerlimit() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fLowerLimit)
  return flowerlimit_;
}
inline void Torque::set_flowerlimit(double value) {
  
  flowerlimit_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fLowerLimit)
}

// double fSpeedDown = 35;
inline void Torque::clear_fspeeddown() {
  fspeeddown_ = 0;
}
inline double Torque::fspeeddown() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fSpeedDown)
  return fspeeddown_;
}
inline void Torque::set_fspeeddown(double value) {
  
  fspeeddown_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fSpeedDown)
}

// double fShow = 36;
inline void Torque::clear_fshow() {
  fshow_ = 0;
}
inline double Torque::fshow() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fShow)
  return fshow_;
}
inline void Torque::set_fshow(double value) {
  
  fshow_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fShow)
}

// double fBear = 37;
inline void Torque::clear_fbear() {
  fbear_ = 0;
}
inline double Torque::fbear() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fBear)
  return fbear_;
}
inline void Torque::set_fbear(double value) {
  
  fbear_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fBear)
}

// double fUpperTai = 38;
inline void Torque::clear_fuppertai() {
  fuppertai_ = 0;
}
inline double Torque::fuppertai() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fUpperTai)
  return fuppertai_;
}
inline void Torque::set_fuppertai(double value) {
  
  fuppertai_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fUpperTai)
}

// double fLowerTai = 39;
inline void Torque::clear_flowertai() {
  flowertai_ = 0;
}
inline double Torque::flowertai() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fLowerTai)
  return flowertai_;
}
inline void Torque::set_flowertai(double value) {
  
  flowertai_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fLowerTai)
}

// double fOptTorq = 40;
inline void Torque::clear_fopttorq() {
  fopttorq_ = 0;
}
inline double Torque::fopttorq() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fOptTorq)
  return fopttorq_;
}
inline void Torque::set_fopttorq(double value) {
  
  fopttorq_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fOptTorq)
}

// double fMaxCir = 41;
inline void Torque::clear_fmaxcir() {
  fmaxcir_ = 0;
}
inline double Torque::fmaxcir() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMaxCir)
  return fmaxcir_;
}
inline void Torque::set_fmaxcir(double value) {
  
  fmaxcir_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMaxCir)
}

// double fUpperCir = 42;
inline void Torque::clear_fuppercir() {
  fuppercir_ = 0;
}
inline double Torque::fuppercir() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fUpperCir)
  return fuppercir_;
}
inline void Torque::set_fuppercir(double value) {
  
  fuppercir_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fUpperCir)
}

// double fControlCir = 43;
inline void Torque::clear_fcontrolcir() {
  fcontrolcir_ = 0;
}
inline double Torque::fcontrolcir() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fControlCir)
  return fcontrolcir_;
}
inline void Torque::set_fcontrolcir(double value) {
  
  fcontrolcir_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fControlCir)
}

// double fLowerCir = 44;
inline void Torque::clear_flowercir() {
  flowercir_ = 0;
}
inline double Torque::flowercir() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fLowerCir)
  return flowercir_;
}
inline void Torque::set_flowercir(double value) {
  
  flowercir_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fLowerCir)
}

// double fMaxTime = 45;
inline void Torque::clear_fmaxtime() {
  fmaxtime_ = 0;
}
inline double Torque::fmaxtime() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMaxTime)
  return fmaxtime_;
}
inline void Torque::set_fmaxtime(double value) {
  
  fmaxtime_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMaxTime)
}

// double fUpperTime = 46;
inline void Torque::clear_fuppertime() {
  fuppertime_ = 0;
}
inline double Torque::fuppertime() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fUpperTime)
  return fuppertime_;
}
inline void Torque::set_fuppertime(double value) {
  
  fuppertime_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fUpperTime)
}

// double fControlTime = 47;
inline void Torque::clear_fcontroltime() {
  fcontroltime_ = 0;
}
inline double Torque::fcontroltime() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fControlTime)
  return fcontroltime_;
}
inline void Torque::set_fcontroltime(double value) {
  
  fcontroltime_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fControlTime)
}

// double fLowerTime = 48;
inline void Torque::clear_flowertime() {
  flowertime_ = 0;
}
inline double Torque::flowertime() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fLowerTime)
  return flowertime_;
}
inline void Torque::set_flowertime(double value) {
  
  flowertime_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fLowerTime)
}

// double fPlus = 51;
inline void Torque::clear_fplus() {
  fplus_ = 0;
}
inline double Torque::fplus() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fPlus)
  return fplus_;
}
inline void Torque::set_fplus(double value) {
  
  fplus_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fPlus)
}

// double fMaxRPM = 52;
inline void Torque::clear_fmaxrpm() {
  fmaxrpm_ = 0;
}
inline double Torque::fmaxrpm() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMaxRPM)
  return fmaxrpm_;
}
inline void Torque::set_fmaxrpm(double value) {
  
  fmaxrpm_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMaxRPM)
}

// double fCut = 53;
inline void Torque::clear_fcut() {
  fcut_ = 0;
}
inline double Torque::fcut() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fCut)
  return fcut_;
}
inline void Torque::set_fcut(double value) {
  
  fcut_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fCut)
}

// double fRpmAdj = 54;
inline void Torque::clear_frpmadj() {
  frpmadj_ = 0;
}
inline double Torque::frpmadj() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fRpmAdj)
  return frpmadj_;
}
inline void Torque::set_frpmadj(double value) {
  
  frpmadj_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fRpmAdj)
}

// double fMulti = 55;
inline void Torque::clear_fmulti() {
  fmulti_ = 0;
}
inline double Torque::fmulti() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMulti)
  return fmulti_;
}
inline void Torque::set_fmulti(double value) {
  
  fmulti_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMulti)
}

// double fMinShlSlope = 70;
inline void Torque::clear_fminshlslope() {
  fminshlslope_ = 0;
}
inline double Torque::fminshlslope() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMinShlSlope)
  return fminshlslope_;
}
inline void Torque::set_fminshlslope(double value) {
  
  fminshlslope_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMinShlSlope)
}

// double fMaxDeltaCir = 71;
inline void Torque::clear_fmaxdeltacir() {
  fmaxdeltacir_ = 0;
}
inline double Torque::fmaxdeltacir() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMaxDeltaCir)
  return fmaxdeltacir_;
}
inline void Torque::set_fmaxdeltacir(double value) {
  
  fmaxdeltacir_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMaxDeltaCir)
}

// double fMinDeltaCir = 72;
inline void Torque::clear_fmindeltacir() {
  fmindeltacir_ = 0;
}
inline double Torque::fmindeltacir() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMinDeltaCir)
  return fmindeltacir_;
}
inline void Torque::set_fmindeltacir(double value) {
  
  fmindeltacir_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMinDeltaCir)
}

// double fMakeupDur = 73;
inline void Torque::clear_fmakeupdur() {
  fmakeupdur_ = 0;
}
inline double Torque::fmakeupdur() const {
  // @@protoc_insertion_point(field_get:TorqData.Torque.fMakeupDur)
  return fmakeupdur_;
}
inline void Torque::set_fmakeupdur(double value) {
  
  fmakeupdur_ = value;
  // @@protoc_insertion_point(field_set:TorqData.Torque.fMakeupDur)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TorqData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TorqData_2eproto__INCLUDED
