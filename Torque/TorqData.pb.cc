// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TorqData.proto

#include "TorqData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace TorqData {
class ShowInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShowInfo>
      _instance;
} _ShowInfo_default_instance_;
class TorqueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Torque>
      _instance;
} _Torque_default_instance_;
}  // namespace TorqData
namespace protobuf_TorqData_2eproto {
void InitDefaultsShowInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::TorqData::_ShowInfo_default_instance_;
    new (ptr) ::TorqData::ShowInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TorqData::ShowInfo::InitAsDefaultInstance();
}

void InitDefaultsShowInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsShowInfoImpl);
}

void InitDefaultsTorqueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TorqData_2eproto::InitDefaultsShowInfo();
  {
    void* ptr = &::TorqData::_Torque_default_instance_;
    new (ptr) ::TorqData::Torque();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TorqData::Torque::InitAsDefaultInstance();
}

void InitDefaultsTorque() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTorqueImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::ShowInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::ShowInfo, strvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::ShowInfo, strname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, coltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwseqno_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwquality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwippos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmaxtorq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, ftorque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, frpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, tshow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, begintime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwiptorq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwtotalplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwipplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwdelplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwcolinter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, llcoltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, btoolbuck_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, strmemo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, strremark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, bncheckip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, bshackle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, btimeline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, dwtorqunit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmaxlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fupperlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fcontrol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, flowerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fspeeddown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fshow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fbear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fuppertai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, flowertai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fopttorq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmaxcir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fuppercir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fcontrolcir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, flowercir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmaxtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fuppertime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fcontroltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, flowertime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmaxrpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fcut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, frpmadj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmulti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fminshlslope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmaxdeltacir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmindeltacir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TorqData::Torque, fmakeupdur_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TorqData::ShowInfo)},
  { 7, -1, sizeof(::TorqData::Torque)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::TorqData::_ShowInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::TorqData::_Torque_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TorqData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016TorqData.proto\022\010TorqData\"-\n\010ShowInfo\022\020"
      "\n\010strValue\030\002 \001(\014\022\017\n\007strName\030\003 \001(\014\"\261\007\n\006To"
      "rque\022\017\n\007coltime\030\001 \001(\006\022\017\n\007dwSeqNo\030\002 \001(\005\022\021"
      "\n\tdwQuality\030\003 \001(\005\022\017\n\007dwIPPos\030\004 \001(\005\022\020\n\010fM"
      "axTorq\030\005 \001(\001\022\023\n\007fTorque\030\006 \003(\001B\002\020\001\022\020\n\004fRp"
      "m\030\007 \003(\001B\002\020\001\022!\n\005tShow\030\010 \003(\0132\022.TorqData.Sh"
      "owInfo\022\021\n\tbegintime\030\t \001(\006\022\020\n\010dwIPTorq\030\n "
      "\001(\005\022\023\n\013dwTotalPlus\030\013 \001(\005\022\020\n\010dwIPPlus\030\014 \001"
      "(\005\022\025\n\tdwDelPlus\030\r \003(\005B\002\020\001\022\022\n\ndwColInter\030"
      "\016 \001(\005\022\021\n\tllColTime\030\017 \001(\014\022\021\n\tbToolBuck\030\025 "
      "\001(\010\022\017\n\007strMemo\030\026 \001(\014\022\021\n\tstrRemark\030\027 \001(\014\022"
      "\021\n\tbNCheckIP\030\030 \001(\010\022\020\n\010bShackle\030\031 \001(\010\022\021\n\t"
      "bTimeLine\030\032 \001(\010\022\022\n\ndwTorqUnit\030\033 \001(\005\022\021\n\tf"
      "MaxLimit\030\037 \001(\001\022\023\n\013fUpperLimit\030  \001(\001\022\020\n\010f"
      "Control\030! \001(\001\022\023\n\013fLowerLimit\030\" \001(\001\022\022\n\nfS"
      "peedDown\030# \001(\001\022\r\n\005fShow\030$ \001(\001\022\r\n\005fBear\030%"
      " \001(\001\022\021\n\tfUpperTai\030& \001(\001\022\021\n\tfLowerTai\030\' \001"
      "(\001\022\020\n\010fOptTorq\030( \001(\001\022\017\n\007fMaxCir\030) \001(\001\022\021\n"
      "\tfUpperCir\030* \001(\001\022\023\n\013fControlCir\030+ \001(\001\022\021\n"
      "\tfLowerCir\030, \001(\001\022\020\n\010fMaxTime\030- \001(\001\022\022\n\nfU"
      "pperTime\030. \001(\001\022\024\n\014fControlTime\030/ \001(\001\022\022\n\n"
      "fLowerTime\0300 \001(\001\022\r\n\005fPlus\0303 \001(\001\022\017\n\007fMaxR"
      "PM\0304 \001(\001\022\014\n\004fCut\0305 \001(\001\022\017\n\007fRpmAdj\0306 \001(\001\022"
      "\016\n\006fMulti\0307 \001(\001\022\024\n\014fMinShlSlope\030F \001(\001\022\024\n"
      "\014fMaxDeltaCir\030G \001(\001\022\024\n\014fMinDeltaCir\030H \001("
      "\001\022\022\n\nfMakeupDur\030I \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1029);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TorqData.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_TorqData_2eproto
namespace TorqData {

// ===================================================================

void ShowInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShowInfo::kStrValueFieldNumber;
const int ShowInfo::kStrNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShowInfo::ShowInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TorqData_2eproto::InitDefaultsShowInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TorqData.ShowInfo)
}
ShowInfo::ShowInfo(const ShowInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strvalue().size() > 0) {
    strvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strvalue_);
  }
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strname().size() > 0) {
    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  // @@protoc_insertion_point(copy_constructor:TorqData.ShowInfo)
}

void ShowInfo::SharedCtor() {
  strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ShowInfo::~ShowInfo() {
  // @@protoc_insertion_point(destructor:TorqData.ShowInfo)
  SharedDtor();
}

void ShowInfo::SharedDtor() {
  strvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowInfo::descriptor() {
  ::protobuf_TorqData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TorqData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShowInfo& ShowInfo::default_instance() {
  ::protobuf_TorqData_2eproto::InitDefaultsShowInfo();
  return *internal_default_instance();
}

ShowInfo* ShowInfo::New(::google::protobuf::Arena* arena) const {
  ShowInfo* n = new ShowInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TorqData.ShowInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ShowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TorqData.ShowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes strValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TorqData.ShowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TorqData.ShowInfo)
  return false;
#undef DO_
}

void ShowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TorqData.ShowInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strValue = 2;
  if (this->strvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->strvalue(), output);
  }

  // bytes strName = 3;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->strname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TorqData.ShowInfo)
}

::google::protobuf::uint8* ShowInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TorqData.ShowInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strValue = 2;
  if (this->strvalue().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strvalue(), target);
  }

  // bytes strName = 3;
  if (this->strname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TorqData.ShowInfo)
  return target;
}

size_t ShowInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TorqData.ShowInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes strValue = 2;
  if (this->strvalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strvalue());
  }

  // bytes strName = 3;
  if (this->strname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TorqData.ShowInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShowInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TorqData.ShowInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TorqData.ShowInfo)
    MergeFrom(*source);
  }
}

void ShowInfo::MergeFrom(const ShowInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TorqData.ShowInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strvalue().size() > 0) {

    strvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strvalue_);
  }
  if (from.strname().size() > 0) {

    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
}

void ShowInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TorqData.ShowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowInfo::CopyFrom(const ShowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TorqData.ShowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowInfo::IsInitialized() const {
  return true;
}

void ShowInfo::Swap(ShowInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShowInfo::InternalSwap(ShowInfo* other) {
  using std::swap;
  strvalue_.Swap(&other->strvalue_);
  strname_.Swap(&other->strname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShowInfo::GetMetadata() const {
  protobuf_TorqData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TorqData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Torque::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Torque::kColtimeFieldNumber;
const int Torque::kDwSeqNoFieldNumber;
const int Torque::kDwQualityFieldNumber;
const int Torque::kDwIPPosFieldNumber;
const int Torque::kFMaxTorqFieldNumber;
const int Torque::kFTorqueFieldNumber;
const int Torque::kFRpmFieldNumber;
const int Torque::kTShowFieldNumber;
const int Torque::kBegintimeFieldNumber;
const int Torque::kDwIPTorqFieldNumber;
const int Torque::kDwTotalPlusFieldNumber;
const int Torque::kDwIPPlusFieldNumber;
const int Torque::kDwDelPlusFieldNumber;
const int Torque::kDwColInterFieldNumber;
const int Torque::kLlColTimeFieldNumber;
const int Torque::kBToolBuckFieldNumber;
const int Torque::kStrMemoFieldNumber;
const int Torque::kStrRemarkFieldNumber;
const int Torque::kBNCheckIPFieldNumber;
const int Torque::kBShackleFieldNumber;
const int Torque::kBTimeLineFieldNumber;
const int Torque::kDwTorqUnitFieldNumber;
const int Torque::kFMaxLimitFieldNumber;
const int Torque::kFUpperLimitFieldNumber;
const int Torque::kFControlFieldNumber;
const int Torque::kFLowerLimitFieldNumber;
const int Torque::kFSpeedDownFieldNumber;
const int Torque::kFShowFieldNumber;
const int Torque::kFBearFieldNumber;
const int Torque::kFUpperTaiFieldNumber;
const int Torque::kFLowerTaiFieldNumber;
const int Torque::kFOptTorqFieldNumber;
const int Torque::kFMaxCirFieldNumber;
const int Torque::kFUpperCirFieldNumber;
const int Torque::kFControlCirFieldNumber;
const int Torque::kFLowerCirFieldNumber;
const int Torque::kFMaxTimeFieldNumber;
const int Torque::kFUpperTimeFieldNumber;
const int Torque::kFControlTimeFieldNumber;
const int Torque::kFLowerTimeFieldNumber;
const int Torque::kFPlusFieldNumber;
const int Torque::kFMaxRPMFieldNumber;
const int Torque::kFCutFieldNumber;
const int Torque::kFRpmAdjFieldNumber;
const int Torque::kFMultiFieldNumber;
const int Torque::kFMinShlSlopeFieldNumber;
const int Torque::kFMaxDeltaCirFieldNumber;
const int Torque::kFMinDeltaCirFieldNumber;
const int Torque::kFMakeupDurFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Torque::Torque()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TorqData_2eproto::InitDefaultsTorque();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TorqData.Torque)
}
Torque::Torque(const Torque& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ftorque_(from.ftorque_),
      frpm_(from.frpm_),
      tshow_(from.tshow_),
      dwdelplus_(from.dwdelplus_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  llcoltime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.llcoltime().size() > 0) {
    llcoltime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.llcoltime_);
  }
  strmemo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strmemo().size() > 0) {
    strmemo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmemo_);
  }
  strremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strremark().size() > 0) {
    strremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strremark_);
  }
  ::memcpy(&coltime_, &from.coltime_,
    static_cast<size_t>(reinterpret_cast<char*>(&fmakeupdur_) -
    reinterpret_cast<char*>(&coltime_)) + sizeof(fmakeupdur_));
  // @@protoc_insertion_point(copy_constructor:TorqData.Torque)
}

void Torque::SharedCtor() {
  llcoltime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmemo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strremark_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&coltime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fmakeupdur_) -
      reinterpret_cast<char*>(&coltime_)) + sizeof(fmakeupdur_));
  _cached_size_ = 0;
}

Torque::~Torque() {
  // @@protoc_insertion_point(destructor:TorqData.Torque)
  SharedDtor();
}

void Torque::SharedDtor() {
  llcoltime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmemo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strremark_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Torque::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Torque::descriptor() {
  ::protobuf_TorqData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TorqData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Torque& Torque::default_instance() {
  ::protobuf_TorqData_2eproto::InitDefaultsTorque();
  return *internal_default_instance();
}

Torque* Torque::New(::google::protobuf::Arena* arena) const {
  Torque* n = new Torque;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Torque::Clear() {
// @@protoc_insertion_point(message_clear_start:TorqData.Torque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ftorque_.Clear();
  frpm_.Clear();
  tshow_.Clear();
  dwdelplus_.Clear();
  llcoltime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmemo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strremark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&coltime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fmakeupdur_) -
      reinterpret_cast<char*>(&coltime_)) + sizeof(fmakeupdur_));
  _internal_metadata_.Clear();
}

bool Torque::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TorqData.Torque)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 coltime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &coltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwSeqNo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwseqno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwQuality = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwIPPos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwippos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMaxTorq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxtorq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double fTorque = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ftorque())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_ftorque())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double fRpm = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_frpm())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58u, input, this->mutable_frpm())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TorqData.ShowInfo tShow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tshow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 begintime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &begintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwIPTorq = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwiptorq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwTotalPlus = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtotalplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwIPPlus = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwipplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dwDelPlus = 13 [packed = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwdelplus())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_dwdelplus())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwColInter = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwcolinter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes llColTime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_llcoltime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bToolBuck = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btoolbuck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strMemo = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmemo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strRemark = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strremark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bNCheckIP = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bncheckip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bShackle = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshackle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bTimeLine = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btimeline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dwTorqUnit = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtorqunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMaxLimit = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fUpperLimit = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fupperlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fControl = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fcontrol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fLowerLimit = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flowerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fSpeedDown = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fspeeddown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fShow = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fshow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fBear = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fbear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fUpperTai = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuppertai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fLowerTai = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flowertai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fOptTorq = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fopttorq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMaxCir = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxcir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fUpperCir = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuppercir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fControlCir = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 345 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fcontrolcir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fLowerCir = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 353 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flowercir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMaxTime = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 361 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fUpperTime = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 369 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuppertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fControlTime = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 377 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fcontroltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fLowerTime = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 385 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flowertime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fPlus = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 409 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMaxRPM = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 417 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxrpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fCut = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 425 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fcut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fRpmAdj = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 433 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frpmadj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMulti = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 441 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmulti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMinShlSlope = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 561 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fminshlslope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMaxDeltaCir = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 569 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxdeltacir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMinDeltaCir = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 577 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmindeltacir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fMakeupDur = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 585 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmakeupdur_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TorqData.Torque)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TorqData.Torque)
  return false;
#undef DO_
}

void Torque::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TorqData.Torque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 coltime = 1;
  if (this->coltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->coltime(), output);
  }

  // int32 dwSeqNo = 2;
  if (this->dwseqno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwseqno(), output);
  }

  // int32 dwQuality = 3;
  if (this->dwquality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dwquality(), output);
  }

  // int32 dwIPPos = 4;
  if (this->dwippos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwippos(), output);
  }

  // double fMaxTorq = 5;
  if (this->fmaxtorq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->fmaxtorq(), output);
  }

  // repeated double fTorque = 6 [packed = true];
  if (this->ftorque_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ftorque_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->ftorque().data(), this->ftorque_size(), output);
  }

  // repeated double fRpm = 7 [packed = true];
  if (this->frpm_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _frpm_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->frpm().data(), this->frpm_size(), output);
  }

  // repeated .TorqData.ShowInfo tShow = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tshow_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tshow(static_cast<int>(i)), output);
  }

  // fixed64 begintime = 9;
  if (this->begintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->begintime(), output);
  }

  // int32 dwIPTorq = 10;
  if (this->dwiptorq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dwiptorq(), output);
  }

  // int32 dwTotalPlus = 11;
  if (this->dwtotalplus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dwtotalplus(), output);
  }

  // int32 dwIPPlus = 12;
  if (this->dwipplus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dwipplus(), output);
  }

  // repeated int32 dwDelPlus = 13 [packed = true];
  if (this->dwdelplus_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dwdelplus_cached_byte_size_));
  }
  for (int i = 0, n = this->dwdelplus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dwdelplus(i), output);
  }

  // int32 dwColInter = 14;
  if (this->dwcolinter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dwcolinter(), output);
  }

  // bytes llColTime = 15;
  if (this->llcoltime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->llcoltime(), output);
  }

  // bool bToolBuck = 21;
  if (this->btoolbuck() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->btoolbuck(), output);
  }

  // bytes strMemo = 22;
  if (this->strmemo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->strmemo(), output);
  }

  // bytes strRemark = 23;
  if (this->strremark().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->strremark(), output);
  }

  // bool bNCheckIP = 24;
  if (this->bncheckip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->bncheckip(), output);
  }

  // bool bShackle = 25;
  if (this->bshackle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->bshackle(), output);
  }

  // bool bTimeLine = 26;
  if (this->btimeline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->btimeline(), output);
  }

  // int32 dwTorqUnit = 27;
  if (this->dwtorqunit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->dwtorqunit(), output);
  }

  // double fMaxLimit = 31;
  if (this->fmaxlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->fmaxlimit(), output);
  }

  // double fUpperLimit = 32;
  if (this->fupperlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->fupperlimit(), output);
  }

  // double fControl = 33;
  if (this->fcontrol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->fcontrol(), output);
  }

  // double fLowerLimit = 34;
  if (this->flowerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->flowerlimit(), output);
  }

  // double fSpeedDown = 35;
  if (this->fspeeddown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->fspeeddown(), output);
  }

  // double fShow = 36;
  if (this->fshow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->fshow(), output);
  }

  // double fBear = 37;
  if (this->fbear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->fbear(), output);
  }

  // double fUpperTai = 38;
  if (this->fuppertai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->fuppertai(), output);
  }

  // double fLowerTai = 39;
  if (this->flowertai() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->flowertai(), output);
  }

  // double fOptTorq = 40;
  if (this->fopttorq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->fopttorq(), output);
  }

  // double fMaxCir = 41;
  if (this->fmaxcir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->fmaxcir(), output);
  }

  // double fUpperCir = 42;
  if (this->fuppercir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->fuppercir(), output);
  }

  // double fControlCir = 43;
  if (this->fcontrolcir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->fcontrolcir(), output);
  }

  // double fLowerCir = 44;
  if (this->flowercir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->flowercir(), output);
  }

  // double fMaxTime = 45;
  if (this->fmaxtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->fmaxtime(), output);
  }

  // double fUpperTime = 46;
  if (this->fuppertime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->fuppertime(), output);
  }

  // double fControlTime = 47;
  if (this->fcontroltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->fcontroltime(), output);
  }

  // double fLowerTime = 48;
  if (this->flowertime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->flowertime(), output);
  }

  // double fPlus = 51;
  if (this->fplus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->fplus(), output);
  }

  // double fMaxRPM = 52;
  if (this->fmaxrpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(52, this->fmaxrpm(), output);
  }

  // double fCut = 53;
  if (this->fcut() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->fcut(), output);
  }

  // double fRpmAdj = 54;
  if (this->frpmadj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->frpmadj(), output);
  }

  // double fMulti = 55;
  if (this->fmulti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->fmulti(), output);
  }

  // double fMinShlSlope = 70;
  if (this->fminshlslope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(70, this->fminshlslope(), output);
  }

  // double fMaxDeltaCir = 71;
  if (this->fmaxdeltacir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(71, this->fmaxdeltacir(), output);
  }

  // double fMinDeltaCir = 72;
  if (this->fmindeltacir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(72, this->fmindeltacir(), output);
  }

  // double fMakeupDur = 73;
  if (this->fmakeupdur() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(73, this->fmakeupdur(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TorqData.Torque)
}

::google::protobuf::uint8* Torque::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TorqData.Torque)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 coltime = 1;
  if (this->coltime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->coltime(), target);
  }

  // int32 dwSeqNo = 2;
  if (this->dwseqno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwseqno(), target);
  }

  // int32 dwQuality = 3;
  if (this->dwquality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dwquality(), target);
  }

  // int32 dwIPPos = 4;
  if (this->dwippos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwippos(), target);
  }

  // double fMaxTorq = 5;
  if (this->fmaxtorq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->fmaxtorq(), target);
  }

  // repeated double fTorque = 6 [packed = true];
  if (this->ftorque_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _ftorque_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->ftorque_, target);
  }

  // repeated double fRpm = 7 [packed = true];
  if (this->frpm_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _frpm_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->frpm_, target);
  }

  // repeated .TorqData.ShowInfo tShow = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tshow_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->tshow(static_cast<int>(i)), deterministic, target);
  }

  // fixed64 begintime = 9;
  if (this->begintime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->begintime(), target);
  }

  // int32 dwIPTorq = 10;
  if (this->dwiptorq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dwiptorq(), target);
  }

  // int32 dwTotalPlus = 11;
  if (this->dwtotalplus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dwtotalplus(), target);
  }

  // int32 dwIPPlus = 12;
  if (this->dwipplus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dwipplus(), target);
  }

  // repeated int32 dwDelPlus = 13 [packed = true];
  if (this->dwdelplus_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _dwdelplus_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dwdelplus_, target);
  }

  // int32 dwColInter = 14;
  if (this->dwcolinter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dwcolinter(), target);
  }

  // bytes llColTime = 15;
  if (this->llcoltime().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->llcoltime(), target);
  }

  // bool bToolBuck = 21;
  if (this->btoolbuck() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->btoolbuck(), target);
  }

  // bytes strMemo = 22;
  if (this->strmemo().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->strmemo(), target);
  }

  // bytes strRemark = 23;
  if (this->strremark().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->strremark(), target);
  }

  // bool bNCheckIP = 24;
  if (this->bncheckip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->bncheckip(), target);
  }

  // bool bShackle = 25;
  if (this->bshackle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->bshackle(), target);
  }

  // bool bTimeLine = 26;
  if (this->btimeline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->btimeline(), target);
  }

  // int32 dwTorqUnit = 27;
  if (this->dwtorqunit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->dwtorqunit(), target);
  }

  // double fMaxLimit = 31;
  if (this->fmaxlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->fmaxlimit(), target);
  }

  // double fUpperLimit = 32;
  if (this->fupperlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->fupperlimit(), target);
  }

  // double fControl = 33;
  if (this->fcontrol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->fcontrol(), target);
  }

  // double fLowerLimit = 34;
  if (this->flowerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->flowerlimit(), target);
  }

  // double fSpeedDown = 35;
  if (this->fspeeddown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->fspeeddown(), target);
  }

  // double fShow = 36;
  if (this->fshow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->fshow(), target);
  }

  // double fBear = 37;
  if (this->fbear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->fbear(), target);
  }

  // double fUpperTai = 38;
  if (this->fuppertai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->fuppertai(), target);
  }

  // double fLowerTai = 39;
  if (this->flowertai() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->flowertai(), target);
  }

  // double fOptTorq = 40;
  if (this->fopttorq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->fopttorq(), target);
  }

  // double fMaxCir = 41;
  if (this->fmaxcir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->fmaxcir(), target);
  }

  // double fUpperCir = 42;
  if (this->fuppercir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->fuppercir(), target);
  }

  // double fControlCir = 43;
  if (this->fcontrolcir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->fcontrolcir(), target);
  }

  // double fLowerCir = 44;
  if (this->flowercir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->flowercir(), target);
  }

  // double fMaxTime = 45;
  if (this->fmaxtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->fmaxtime(), target);
  }

  // double fUpperTime = 46;
  if (this->fuppertime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->fuppertime(), target);
  }

  // double fControlTime = 47;
  if (this->fcontroltime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->fcontroltime(), target);
  }

  // double fLowerTime = 48;
  if (this->flowertime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->flowertime(), target);
  }

  // double fPlus = 51;
  if (this->fplus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->fplus(), target);
  }

  // double fMaxRPM = 52;
  if (this->fmaxrpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(52, this->fmaxrpm(), target);
  }

  // double fCut = 53;
  if (this->fcut() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->fcut(), target);
  }

  // double fRpmAdj = 54;
  if (this->frpmadj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->frpmadj(), target);
  }

  // double fMulti = 55;
  if (this->fmulti() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->fmulti(), target);
  }

  // double fMinShlSlope = 70;
  if (this->fminshlslope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(70, this->fminshlslope(), target);
  }

  // double fMaxDeltaCir = 71;
  if (this->fmaxdeltacir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(71, this->fmaxdeltacir(), target);
  }

  // double fMinDeltaCir = 72;
  if (this->fmindeltacir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(72, this->fmindeltacir(), target);
  }

  // double fMakeupDur = 73;
  if (this->fmakeupdur() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(73, this->fmakeupdur(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TorqData.Torque)
  return target;
}

size_t Torque::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TorqData.Torque)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double fTorque = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->ftorque_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ftorque_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double fRpm = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->frpm_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _frpm_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .TorqData.ShowInfo tShow = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->tshow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tshow(static_cast<int>(i)));
    }
  }

  // repeated int32 dwDelPlus = 13 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dwdelplus_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dwdelplus_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes llColTime = 15;
  if (this->llcoltime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->llcoltime());
  }

  // bytes strMemo = 22;
  if (this->strmemo().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strmemo());
  }

  // bytes strRemark = 23;
  if (this->strremark().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strremark());
  }

  // fixed64 coltime = 1;
  if (this->coltime() != 0) {
    total_size += 1 + 8;
  }

  // int32 dwSeqNo = 2;
  if (this->dwseqno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwseqno());
  }

  // int32 dwQuality = 3;
  if (this->dwquality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwquality());
  }

  // double fMaxTorq = 5;
  if (this->fmaxtorq() != 0) {
    total_size += 1 + 8;
  }

  // int32 dwIPPos = 4;
  if (this->dwippos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwippos());
  }

  // int32 dwIPTorq = 10;
  if (this->dwiptorq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwiptorq());
  }

  // fixed64 begintime = 9;
  if (this->begintime() != 0) {
    total_size += 1 + 8;
  }

  // int32 dwTotalPlus = 11;
  if (this->dwtotalplus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwtotalplus());
  }

  // int32 dwIPPlus = 12;
  if (this->dwipplus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwipplus());
  }

  // int32 dwColInter = 14;
  if (this->dwcolinter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwcolinter());
  }

  // bool bToolBuck = 21;
  if (this->btoolbuck() != 0) {
    total_size += 2 + 1;
  }

  // bool bNCheckIP = 24;
  if (this->bncheckip() != 0) {
    total_size += 2 + 1;
  }

  // bool bShackle = 25;
  if (this->bshackle() != 0) {
    total_size += 2 + 1;
  }

  // bool bTimeLine = 26;
  if (this->btimeline() != 0) {
    total_size += 2 + 1;
  }

  // double fMaxLimit = 31;
  if (this->fmaxlimit() != 0) {
    total_size += 2 + 8;
  }

  // double fUpperLimit = 32;
  if (this->fupperlimit() != 0) {
    total_size += 2 + 8;
  }

  // double fControl = 33;
  if (this->fcontrol() != 0) {
    total_size += 2 + 8;
  }

  // double fLowerLimit = 34;
  if (this->flowerlimit() != 0) {
    total_size += 2 + 8;
  }

  // double fSpeedDown = 35;
  if (this->fspeeddown() != 0) {
    total_size += 2 + 8;
  }

  // double fShow = 36;
  if (this->fshow() != 0) {
    total_size += 2 + 8;
  }

  // double fBear = 37;
  if (this->fbear() != 0) {
    total_size += 2 + 8;
  }

  // double fUpperTai = 38;
  if (this->fuppertai() != 0) {
    total_size += 2 + 8;
  }

  // double fLowerTai = 39;
  if (this->flowertai() != 0) {
    total_size += 2 + 8;
  }

  // double fOptTorq = 40;
  if (this->fopttorq() != 0) {
    total_size += 2 + 8;
  }

  // double fMaxCir = 41;
  if (this->fmaxcir() != 0) {
    total_size += 2 + 8;
  }

  // double fUpperCir = 42;
  if (this->fuppercir() != 0) {
    total_size += 2 + 8;
  }

  // double fControlCir = 43;
  if (this->fcontrolcir() != 0) {
    total_size += 2 + 8;
  }

  // double fLowerCir = 44;
  if (this->flowercir() != 0) {
    total_size += 2 + 8;
  }

  // double fMaxTime = 45;
  if (this->fmaxtime() != 0) {
    total_size += 2 + 8;
  }

  // double fUpperTime = 46;
  if (this->fuppertime() != 0) {
    total_size += 2 + 8;
  }

  // double fControlTime = 47;
  if (this->fcontroltime() != 0) {
    total_size += 2 + 8;
  }

  // double fLowerTime = 48;
  if (this->flowertime() != 0) {
    total_size += 2 + 8;
  }

  // int32 dwTorqUnit = 27;
  if (this->dwtorqunit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dwtorqunit());
  }

  // double fPlus = 51;
  if (this->fplus() != 0) {
    total_size += 2 + 8;
  }

  // double fMaxRPM = 52;
  if (this->fmaxrpm() != 0) {
    total_size += 2 + 8;
  }

  // double fCut = 53;
  if (this->fcut() != 0) {
    total_size += 2 + 8;
  }

  // double fRpmAdj = 54;
  if (this->frpmadj() != 0) {
    total_size += 2 + 8;
  }

  // double fMulti = 55;
  if (this->fmulti() != 0) {
    total_size += 2 + 8;
  }

  // double fMinShlSlope = 70;
  if (this->fminshlslope() != 0) {
    total_size += 2 + 8;
  }

  // double fMaxDeltaCir = 71;
  if (this->fmaxdeltacir() != 0) {
    total_size += 2 + 8;
  }

  // double fMinDeltaCir = 72;
  if (this->fmindeltacir() != 0) {
    total_size += 2 + 8;
  }

  // double fMakeupDur = 73;
  if (this->fmakeupdur() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Torque::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TorqData.Torque)
  GOOGLE_DCHECK_NE(&from, this);
  const Torque* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Torque>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TorqData.Torque)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TorqData.Torque)
    MergeFrom(*source);
  }
}

void Torque::MergeFrom(const Torque& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TorqData.Torque)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ftorque_.MergeFrom(from.ftorque_);
  frpm_.MergeFrom(from.frpm_);
  tshow_.MergeFrom(from.tshow_);
  dwdelplus_.MergeFrom(from.dwdelplus_);
  if (from.llcoltime().size() > 0) {

    llcoltime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.llcoltime_);
  }
  if (from.strmemo().size() > 0) {

    strmemo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmemo_);
  }
  if (from.strremark().size() > 0) {

    strremark_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strremark_);
  }
  if (from.coltime() != 0) {
    set_coltime(from.coltime());
  }
  if (from.dwseqno() != 0) {
    set_dwseqno(from.dwseqno());
  }
  if (from.dwquality() != 0) {
    set_dwquality(from.dwquality());
  }
  if (from.fmaxtorq() != 0) {
    set_fmaxtorq(from.fmaxtorq());
  }
  if (from.dwippos() != 0) {
    set_dwippos(from.dwippos());
  }
  if (from.dwiptorq() != 0) {
    set_dwiptorq(from.dwiptorq());
  }
  if (from.begintime() != 0) {
    set_begintime(from.begintime());
  }
  if (from.dwtotalplus() != 0) {
    set_dwtotalplus(from.dwtotalplus());
  }
  if (from.dwipplus() != 0) {
    set_dwipplus(from.dwipplus());
  }
  if (from.dwcolinter() != 0) {
    set_dwcolinter(from.dwcolinter());
  }
  if (from.btoolbuck() != 0) {
    set_btoolbuck(from.btoolbuck());
  }
  if (from.bncheckip() != 0) {
    set_bncheckip(from.bncheckip());
  }
  if (from.bshackle() != 0) {
    set_bshackle(from.bshackle());
  }
  if (from.btimeline() != 0) {
    set_btimeline(from.btimeline());
  }
  if (from.fmaxlimit() != 0) {
    set_fmaxlimit(from.fmaxlimit());
  }
  if (from.fupperlimit() != 0) {
    set_fupperlimit(from.fupperlimit());
  }
  if (from.fcontrol() != 0) {
    set_fcontrol(from.fcontrol());
  }
  if (from.flowerlimit() != 0) {
    set_flowerlimit(from.flowerlimit());
  }
  if (from.fspeeddown() != 0) {
    set_fspeeddown(from.fspeeddown());
  }
  if (from.fshow() != 0) {
    set_fshow(from.fshow());
  }
  if (from.fbear() != 0) {
    set_fbear(from.fbear());
  }
  if (from.fuppertai() != 0) {
    set_fuppertai(from.fuppertai());
  }
  if (from.flowertai() != 0) {
    set_flowertai(from.flowertai());
  }
  if (from.fopttorq() != 0) {
    set_fopttorq(from.fopttorq());
  }
  if (from.fmaxcir() != 0) {
    set_fmaxcir(from.fmaxcir());
  }
  if (from.fuppercir() != 0) {
    set_fuppercir(from.fuppercir());
  }
  if (from.fcontrolcir() != 0) {
    set_fcontrolcir(from.fcontrolcir());
  }
  if (from.flowercir() != 0) {
    set_flowercir(from.flowercir());
  }
  if (from.fmaxtime() != 0) {
    set_fmaxtime(from.fmaxtime());
  }
  if (from.fuppertime() != 0) {
    set_fuppertime(from.fuppertime());
  }
  if (from.fcontroltime() != 0) {
    set_fcontroltime(from.fcontroltime());
  }
  if (from.flowertime() != 0) {
    set_flowertime(from.flowertime());
  }
  if (from.dwtorqunit() != 0) {
    set_dwtorqunit(from.dwtorqunit());
  }
  if (from.fplus() != 0) {
    set_fplus(from.fplus());
  }
  if (from.fmaxrpm() != 0) {
    set_fmaxrpm(from.fmaxrpm());
  }
  if (from.fcut() != 0) {
    set_fcut(from.fcut());
  }
  if (from.frpmadj() != 0) {
    set_frpmadj(from.frpmadj());
  }
  if (from.fmulti() != 0) {
    set_fmulti(from.fmulti());
  }
  if (from.fminshlslope() != 0) {
    set_fminshlslope(from.fminshlslope());
  }
  if (from.fmaxdeltacir() != 0) {
    set_fmaxdeltacir(from.fmaxdeltacir());
  }
  if (from.fmindeltacir() != 0) {
    set_fmindeltacir(from.fmindeltacir());
  }
  if (from.fmakeupdur() != 0) {
    set_fmakeupdur(from.fmakeupdur());
  }
}

void Torque::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TorqData.Torque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torque::CopyFrom(const Torque& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TorqData.Torque)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torque::IsInitialized() const {
  return true;
}

void Torque::Swap(Torque* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Torque::InternalSwap(Torque* other) {
  using std::swap;
  ftorque_.InternalSwap(&other->ftorque_);
  frpm_.InternalSwap(&other->frpm_);
  tshow_.InternalSwap(&other->tshow_);
  dwdelplus_.InternalSwap(&other->dwdelplus_);
  llcoltime_.Swap(&other->llcoltime_);
  strmemo_.Swap(&other->strmemo_);
  strremark_.Swap(&other->strremark_);
  swap(coltime_, other->coltime_);
  swap(dwseqno_, other->dwseqno_);
  swap(dwquality_, other->dwquality_);
  swap(fmaxtorq_, other->fmaxtorq_);
  swap(dwippos_, other->dwippos_);
  swap(dwiptorq_, other->dwiptorq_);
  swap(begintime_, other->begintime_);
  swap(dwtotalplus_, other->dwtotalplus_);
  swap(dwipplus_, other->dwipplus_);
  swap(dwcolinter_, other->dwcolinter_);
  swap(btoolbuck_, other->btoolbuck_);
  swap(bncheckip_, other->bncheckip_);
  swap(bshackle_, other->bshackle_);
  swap(btimeline_, other->btimeline_);
  swap(fmaxlimit_, other->fmaxlimit_);
  swap(fupperlimit_, other->fupperlimit_);
  swap(fcontrol_, other->fcontrol_);
  swap(flowerlimit_, other->flowerlimit_);
  swap(fspeeddown_, other->fspeeddown_);
  swap(fshow_, other->fshow_);
  swap(fbear_, other->fbear_);
  swap(fuppertai_, other->fuppertai_);
  swap(flowertai_, other->flowertai_);
  swap(fopttorq_, other->fopttorq_);
  swap(fmaxcir_, other->fmaxcir_);
  swap(fuppercir_, other->fuppercir_);
  swap(fcontrolcir_, other->fcontrolcir_);
  swap(flowercir_, other->flowercir_);
  swap(fmaxtime_, other->fmaxtime_);
  swap(fuppertime_, other->fuppertime_);
  swap(fcontroltime_, other->fcontroltime_);
  swap(flowertime_, other->flowertime_);
  swap(dwtorqunit_, other->dwtorqunit_);
  swap(fplus_, other->fplus_);
  swap(fmaxrpm_, other->fmaxrpm_);
  swap(fcut_, other->fcut_);
  swap(frpmadj_, other->frpmadj_);
  swap(fmulti_, other->fmulti_);
  swap(fminshlslope_, other->fminshlslope_);
  swap(fmaxdeltacir_, other->fmaxdeltacir_);
  swap(fmindeltacir_, other->fmindeltacir_);
  swap(fmakeupdur_, other->fmakeupdur_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Torque::GetMetadata() const {
  protobuf_TorqData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TorqData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TorqData

// @@protoc_insertion_point(global_scope)
